import { DataListPropsType } from '../../components/dataList/DataList';

export const VDomListData: DataListPropsType = {
  header: 'Почему это так важно? Вот несколько причин:',
  footer:
    'В итоге, использование виртуального DOM позволяет React быть эффективной, удобной в использовании библиотекой.',
  listData: [
    'Эффективность: Виртуальный DOM позволяет React оптимизировать обновление DOM. Вместо того, чтобы изменять каждый элемент по отдельности, React находит минимальный набор изменений, которые необходимо внести, и применяет их к реальному DOM. Это снижает нагрузку на браузер и улучшает производительность приложения.',
    'Удобство программирования: Работа с виртуальным DOM упрощает разработку. Ты можешь думать о компонентах и их состояниях, не беспокоясь о том, как React будет обновлять реальный DOM. React самостоятельно заботится об эффективных изменениях.',
    'Переносимость: Виртуальный DOM абстрагирует тебя от различий в реализации DOM в разных браузерах. Ты можешь писать свое приложение, не думая о том, какой браузер будет его запускать. React самостоятельно обрабатывает эти различия.',
  ],
};

export const ListDataReconciliation: DataListPropsType = {
  header: 'Reconciliation происходит по следующему сценарию:',
  listData: [
    'Обновление состояния: Когда состояние компонента изменяется, React запускает процесс reconciliation. Он сравнивает предыдущее состояние компонента с новым состоянием, чтобы определить, какие части интерфейса нужно обновить.',
    'Сравнение элементов: React сравнивает элементы, которые представляют компоненты, и их дочерние элементы. Он анализирует их типы, свойства и ключи, чтобы понять, какие элементы нужно обновить, добавить или удалить.',
    'Обновление виртуального DOM: React использует виртуальный DOM (Virtual DOM), который является внутренним представлением интерфейса. Он создает новое виртуальное дерево элементов на основе изменений состояния компонента.',
    'Эффективные обновления: React делает эффективные обновления, минимизируя количество фактических изменений в реальном DOM. Он определяет, какие элементы действительно нужно обновить, и применяет только эти изменения в реальном DOM, чтобы избежать ненужных операций.',
  ],
};
